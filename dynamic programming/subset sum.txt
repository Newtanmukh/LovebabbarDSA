bool findPartiion(int arr[], int n,
int sum)
{

	int i, j;





	bool part[sum  + 1][n + 1];

	// initialize top row as true
	for (i = 0; i <= n; i++)
		part[0][i] = true;

	// initialize leftmost column,
	// except part[0][0], as 0
	for (i = 1; i <= sum ; i++)
		part[i][0] = false;

	// Fill the partition table in bottom up manner
	for (i = 1; i <= sum ; i++) {
		for (j = 1; j <= n; j++) {
		part[i][j] = part[i][j-1];
			if (i >= arr[j - 1])
				part[i][j] = part[i][j-1]
							|| part[i - arr[j - 1]][j - 1];
		}
	}

	/* // uncomment this part to print table
	for (i = 0; i <= sum/2; i++)
	{
	for (j = 0; j <= n; j++)
		cout<<part[i][j];
	cout<<endl;
	} */

	return part[sum ][n];
}